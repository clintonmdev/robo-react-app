{"version":3,"sources":["components/CardList.js","components/searchBox.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reducers.js","registerServiceWorker.js","index.js"],"names":["CardList","listRobots","robots","map","robot","className","alt","src","id","name","email","SearchBox","searchfield","searchChange","type","placeholder","onChange","Header","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","SET_ROBOTS","connect","searchField","searchRobots","getRobots","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","users","useEffect","fetch","then","response","json","filterRobots","filter","toLowerCase","includes","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6330d6a3.chunk.js","sourcesContent":["import React  from 'react';\n\n\nconst CardList = ({robots}) => {\n\n\n    const listRobots = robots.map((robot) =>\n    <div key={robot.id} className='tc bg-light-green dib br3 pa3 ma2 grow bw shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${robot.id}}?200x200`}/>\n            <div>\n                <h2>{robot.name}</h2>\n                <p>{robot.email}</p>\n            </div>\n        </div>\n    \n    );\n    \n    return (\n        <div>\n        {listRobots}\n        </ div>\n    );\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return(\n        <div className='pa2'>\n        <input \n        className='pa3 ba b--green bg-lightest-blue' \n        type=\"search\" \n        placeholder='Search robots'\n        onChange={searchChange} />\n        \n        </div>\n    )\n}\n\nexport default SearchBox","import React, {Component} from 'react';\n\nconst Header = () => (\n    <h1 className='f2' >RoboFriends </h1>\n)\n\nexport default Header;","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    ) \n}\n\nexport default Scroll;","import React, {Component} from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError){\n            return <h1>Oooops. thats not good </h1>\n\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const SET_ROBOTS = 'SET_ROBOTS';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/searchBox.js';\nimport Header from '../components/Header.js'\nimport Scroll from '../components/Scroll';\nimport  './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setRobots, setSearchField } from '../actions.js';\n\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.getRobots.robots,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: (users) => dispatch(setRobots(users))\n    }\n}\n\nfunction App(props){\n\n    let onRequestRobots = props.onRequestRobots\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => \n            response.json())\n        .then(users => \n            onRequestRobots(users));\n    }, [])\n\n    // const onSearchChange = (event) => {\n    //     setSearchField(event.target.value)\n    // }\n\n    const filterRobots = props.robots.filter(robot => {\n        return robot.name.toLowerCase().includes(props.searchField.toLowerCase())})\n    \n    \n\n    return !props.robots ?\n        <h1>Loading...</h1> :\n        (\n            <div className='tc'>\n                <Header/>\n                <SearchBox searchChange={props.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filterRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n    };\n    \n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    SET_ROBOTS\n } from './constants.js'\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const setRobots = (text) => ({\n    type: SET_ROBOTS,\n    payload: text\n})\n\n// export const requestRobots = () => (dispatch) => {\n//     dispatch({\n//         type: REQUEST_ROBOTS_PENDING\n//     });\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response => \n//         response.json())\n//     .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n//     .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n// }\n\n","import { \n    CHANGE_SEARCH_FIELD,\n    SET_ROBOTS\n } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\n// const initialStateRobots = {\n//     isPending: false,\n//     robots:[],\n//     error: ''\n// }\n\n// export const requestRobots = (state=initialStateRobots, action={}) => {\n//     switch (action.type){\n//         case REQUEST_ROBOTS_PENDING:\n//             return Object.assign({}, state, {isPending: true})\n//         case REQUEST_ROBOTS_SUCCESS:\n//             return Object.assign({}, state, {robots:action.payload, isPending: false})\n//         case REQUEST_ROBOTS_FAILED:\n//             return Object.assign({}, state, {error:action.payload, isPending:false})\n//         default:\n//             return state\n//     }\n// }\n\nconst initialStateRobots = {\n    robots:[],\n}\nexport const getRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case SET_ROBOTS:\n            return Object.assign({}, state, {robots:action.payload})\n        default:\n            return state\n        }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport './index.css';\nimport App from './containers/App'\nimport 'tachyons';\nimport { searchRobots, getRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, getRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\nregisterServiceWorker();"],"sourceRoot":""}